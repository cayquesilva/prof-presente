// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  ORGANIZER
  CHECKIN_COORDINATOR
  TEACHER
  GESTOR_ESCOLA
}

enum EnrollmentStatus {
  PENDING
  APPROVED
  CANCELLED
  REJECTED
}

enum WorkShift {
  MANHA
  TARDE
  NOITE
  INTEGRAL
}

enum ContractType {
  EFETIVO
  PRESTADOR
}

enum TeachingSegment {
  INFANTIL
  FUNDAMENTAL1
  FUNDAMENTAL2
  EJA
  ADMINISTRATIVO
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  cpf         String?   @unique
  birthDate   DateTime
  phone       String?
  address     String?
  photoUrl    String?
  role        UserRole  @default(TEACHER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  neighborhood    String?         // Bairro
  workShifts      WorkShift[]     // <-- ADICIONE ESTA (NO PLURAL)
  contractType    ContractType?   // Tipo de vínculo
  teachingSegments TeachingSegment[] // <-- ADICIONE ESTA (NO PLURAL)
  professionId    String?         @map("profession_id")
  certificateLogs CertificateLog[]


  // Relacionamentos
  enrollments   Enrollment[]
  userAwards    UserAward[]
  userBadge     UserBadge?
  profession    Profession? @relation(fields: [professionId], references: [id], onDelete: SetNull) // Novo relacionamento
  workplaces    Workplace[] @relation("UserWorkplaces")
  createdEvents Event[] @relation("CreatedEvents") // Eventos criados pelo usuário


  @@index([email])
  @@index([role])
  @@index([professionId]) 
  @@index([createdAt])
  @@map("users")
}

model Profession {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  users User[]

  @@map("professions")
}

model Event {
  id           String    @id @default(uuid())
  title        String
  description  String
  startDate    DateTime
  endDate      DateTime
  location     String
  maxAttendees Int?
  imageUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

   // NOVOS CAMPOS: Para o crachá impresso personalizado
  badgeTemplateUrl    String?   @map("badge_template_url")
  badgeTemplateConfig Json?     @map("badge_template_config")

  // --- NOVOS CAMPOS PARA EVENTOS PRIVADOS ---
  isPrivate Boolean @default(false)
  creatorId String? @map("creator_id")
  creator   User?   @relation("CreatedEvents", fields: [creatorId], references: [id], onDelete: SetNull)

  // Relacionamento de Pai-Filho
  parentId     String?     @map("parent_id")
  parent       Event?      @relation("EventTree", fields: [parentId], references: [id], onDelete: SetNull)
  children     Event[]     @relation("EventTree")

  // Campo para o template do certificado (apenas no evento "pai")
  certificateTemplateUrl String? @map("certificate_template_url")
  certificateTemplateConfig Json? @map("certificate_template_config")
  certificateLogs CertificateLog[]



  // Relacionamentos
  enrollments Enrollment[]

  @@index([startDate])
  @@index([endDate])
  @@index([parentId])
  @@index([creatorId])
  @@index([createdAt])
  @@map("events")
}

model Enrollment {
  id             String           @id @default(uuid())
  userId         String
  eventId        String
  enrollmentDate DateTime         @default(now())
  status         EnrollmentStatus @default(APPROVED)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Relacionamentos
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  event            Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  courseEvaluation CourseEvaluation?

  @@unique([userId, eventId])
  @@index([userId])
  @@index([eventId])
  @@index([status])
  @@index([enrollmentDate])
  @@map("enrollments")
}

model Award {
  id          String   @id @default(uuid())
  name        String
  description String?
  imageUrl    String?
  criteria    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userAwards UserAward[]

  @@index([createdAt])
  @@map("awards")
}

model UserAward {
  id        String   @id @default(uuid())
  userId    String
  awardId   String
  awardedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  award Award @relation(fields: [awardId], references: [id], onDelete: Cascade)

  @@unique([userId, awardId])
  @@index([userId])
  @@index([awardId])
  @@index([awardedAt])
  @@map("user_awards")
}

model CourseEvaluation {
  id           String   @id @default(uuid())
  enrollmentId String   @unique
  rating       Int      @default(1) // 1 a 5 estrelas
  comment      String?
  evaluatedAt  DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([rating])
  @@index([evaluatedAt])
  @@index([createdAt])
  @@map("course_evaluations")
}

model UserBadge {
  id             String    @id @default(uuid())
  userId         String    @unique
  badgeCode      String    @unique
  qrCodeUrl      String
  badgeImageUrl  String
  issuedAt       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacionamentos
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userCheckins   UserCheckin[]

  @@index([badgeCode])
  @@index([issuedAt])
  @@index([createdAt])
  @@map("user_badges")
}

model UserCheckin {
  id            String      @id @default(uuid())
  userBadgeId   String
  eventId       String
  checkinTime   DateTime    @default(now())
  location      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relacionamentos
  userBadge UserBadge @relation(fields: [userBadgeId], references: [id], onDelete: Cascade)

  @@index([userBadgeId])
  @@index([eventId])
  @@index([checkinTime])
  @@index([createdAt])
  @@map("user_checkins")
}

model Workplace {
  id          String   @id @default(uuid())
  name        String
  description String?
  city        String
  state       String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relacionamentos
  users User[] @relation("UserWorkplaces")

  @@index([name])
  @@index([city])
  @@index([state])
  @@map("workplaces")
}

model CertificateLog {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  status    String // "SUCCESS" ou "FAILED"
  details   String?  // Para mensagens de erro

  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
}